<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">
        
        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
        
        <!-- Useful for specs -->
        <!ENTITY MAY    '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MAY</emphasis>'>
        <!ENTITY SHOULD '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">SHOULD</emphasis>'>
        <!ENTITY MUST   '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST</emphasis>'>
        <!ENTITY MUST_NOT   '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST NOT</emphasis>'>
        <!ENTITY CIS 'Rackspace Cloud Identity Service'>
<!ENTITY fgCS 'first generation Cloud Servers'>
<!ENTITY ngCS 'next generation Cloud Servers'>
<!ENTITY cnresource1 'rax-networks'>
<!ENTITY virt_ext 'Cloud Networks virtual interface extension'>
<!ENTITY Uvirt_ext 'Cloud Networks Virtual Interface Extension'>
<!ENTITY cnresource2 'os-networksv2'>
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:raxm="http://docs.rackspace.com/api/metadata" version="5.0"
    xml:id="ch_gs_attach_network_to_server">
    <info>
        <title>Attach Your Network to an Existing Server</title>
        <raxm:metadata>
            <raxm:type>tutorial</raxm:type>
            <raxm:product version="v2">servers</raxm:product>
            <raxm:priority>1</raxm:priority>
        </raxm:metadata>
    </info>
    <!-- <?dbhtml stop-chunking?> -->
    <para>Use the &virt_ext; to create a virtual interface to a specified network and attach the network to an existing
        server instance. </para>
    <para>You can create a maximum of one virtual interface per instance per network. </para>
    <para>You can also use the &virt_ext; to:</para>
    <itemizedlist>
        <listitem>
            <para>List the virtual interfaces for a server instance.</para>
        </listitem>
        <listitem>
            <para>Delete a virtual interface and detach it from a server instance.</para>
        </listitem>
    </itemizedlist>
    <para>These examples walk you through the steps to create a virtual interface to a specified network and attach the
        network to an existing server instance. The simple exercises show you how to access the &virt_ext; through nova
        client commands or cURL commands.</para>
    <para>The exercises also help you learn how cURL commands and the Cloud Networks API work. </para>

    <section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="section_gs_install_vir_interface">

        <title>Step 1. Install the &Uvirt_ext;</title>

        <procedure>
            <title>To install the &virt_ext;</title>

            <step>
                <title>Install the &virt_ext;</title>
                <para>The <literal>os_virtual_interfacesv2_python_novaclient_ext</literal> package contains the &virt_ext;. </para>
                <para>Run the following command to install the package:</para>
                <programlisting language="bash" role="gutter: false"><prompt>$</prompt> sudo pip install os_virtual_interfacesv2_python_novaclient_ext</programlisting>
                <note>

                    <para>If you previously installed this package, run the following command to upgrade it:
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> sudo pip install os_virtual_interfacesv2_python_novaclient_ext --upgrade</programlisting></para>
                </note>

            </step>

            <?sbr?>

            <step>
                <title>Test the &virt_ext;</title>
                <para>To verify that you can talk to the API server, run the following commands.</para>
                <para>First, authenticate:
                    <programlisting language="bash" role="gutter:false"><prompt>$</prompt> nova credentials </programlisting></para>
                <para condition="cn">Then, list networks:
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> nova network-list </programlisting>Then,
                    list virtual interfaces:
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> nova virtual-interface-list <replaceable>instance_id</replaceable></programlisting></para>
                <para>Where <parameter>instance_id</parameter> is the ID of your server instance.</para>
            </step>
        </procedure>
    </section>

    <?hard-pagebreak?>
    <section xml:id="list_servers2">
        <title>Step 2. List Servers</title>
        <para>To get the ID of the server instance to which you want to attach a virtual interface, list the servers in your
            Cloud account. </para>
        <sidebar>
            <para><emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                    <listitem>
                        <para><link linkend="nova_list_servers2">List servers with the nova client</link></para>
                    </listitem>
                    <listitem>
                        <para><link linkend="curl_list_servers2">List servers with cURL</link></para>
                    </listitem>
                </itemizedlist></para>
        </sidebar>
        <?hard-pagebreak?>
        <section xml:id="nova_list_servers2">
            <title>List Servers with the nova Client</title>
            <procedure>
                <title>To list servers with the nova client:</title>
                <step>
                    <para>Issue the following command:</para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> nova list</programlisting>
                    <para>For each server, the command returns the server ID, name, status, and public and private IP
                        addresses, as shown in the following output:</para>
                    <informalexample>
                        <screen><computeroutput><?db-font-size 40%?>+--------------------------------------+----------------+--------+---------------------------------------------------------------------------------------+
| ID                                   | Name           | Status | Networks                                                                              |
+--------------------------------------+----------------+--------+---------------------------------------------------------------------------------------+
| 9da98125-0de8-4b84-880c-b42977c32773 | myUbuntuServer | ACTIVE | public=2001:4800:780d:0509:d87b:9cbc:ff04:488b, 198.101.231.59; private=10.179.224.74 |
| a09e7493-7429-41e1-8d3f-384d7ece09c0 | UbuntuDevStack | ACTIVE | public=2001:4800:780e:0510:d87b:9cbc:ff04:3e81, 50.56.186.185; private=10.180.13.75   |
+--------------------------------------+----------------+--------+---------------------------------------------------------------------------------------+</computeroutput></screen>
                    </informalexample>
                </step>
                <step>
                    <para>Copy the ID for the server to which you want to connect a virtual interface. </para>
                </step>
            </procedure>
            <sidebar>
                <para><emphasis role="bold">Next step:</emphasis>
                    <link linkend="list_networks2">List networks</link></para>
            </sidebar>
        </section>
        <?hard-pagebreak?>
        <section xml:id="curl_list_servers2">
            <title>List Servers with cURL</title>
            <procedure>
                <title>To list servers with cURL:</title>
                <step>
                    <para>Issue the following command:</para>
                    <programlisting language="bash" role="gutter: false"><?db-font-size 60%?><prompt>$</prompt> curl -s https://dfw.servers.api.rackspacecloud.com/v2/$account/servers/detail \
     -H "X-Auth-Token: $token" | python -m json.tool</programlisting>
                    <para>For each server, the command returns the disk configuration, private and public IP addresses,
                        flavor and image information, the server ID, and the server status. </para>
                    <para>The following output shows the list servers information:</para>
                    <programlisting language="json"><?db-font-size 60%?>{
    "servers": [
        {
            "OS-DCF:diskConfig": "AUTO", 
            "OS-EXT-STS:power_state": 0, 
            "OS-EXT-STS:task_state": "spawning", 
            "OS-EXT-STS:vm_state": "building", 
            "accessIPv4": "", 
            "accessIPv6": "", 
            "addresses": {
                "private": [
                    {
                        "addr": "10.180.16.21", 
                        "version": 4
                    }
                ], 
                "public": [
                    {
                        "addr": "2001:4800:780e:0510:d87b:9cbc:ff04:4bac", 
                        "version": 6
                    }, 
                    {
                        "addr": "198.101.242.47", 
                        "version": 4
                    }
                ]
            }, 
            "created": "2012-08-16T17:11:43Z", 
            "flavor": {
                "id": "6", 
                "links": [
                    {
                        "href": "https://dfw.servers.api.rackspacecloud.com/010101/flavors/6", 
                        "rel": "bookmark"
                    }
                ]
            }, 
            "hostId": "692f611d2d84e5368b5995d7733ca5f175dc670eda91eded50a47eab", 
            "id": "1a861bf7-2a5e-40a4-acb3-1fb058cf2a74", 
            "image": {
                "id": "3afe97b2-26dc-49c5-a2cc-a2fc8d80c001", 
                "links": [
                    {
                        "href": "https://dfw.servers.api.rackspacecloud.com/010101/images/3afe97b2-26dc-49c5-a2cc-a2fc8d80c001", 
                        "rel": "bookmark"
                    }
                ]
            }, 
            "links": [
                {
                    "href": "https://dfw.servers.api.rackspacecloud.com/v2/010101/servers/1a861bf7-2a5e-40a4-acb3-1fb058cf2a74", 
                    "rel": "self"
                }, 
                {
                    "href": "https://dfw.servers.api.rackspacecloud.com/010101/servers/1a861bf7-2a5e-40a4-acb3-1fb058cf2a74", 
                    "rel": "bookmark"
                }
            ], 
            "metadata": {
                "My Server Name": "Ubuntu 11.10 server"
            }, 
            "name": "myUbuntuServer", 
            "progress": 75, 
            "status": "BUILD", 
            "tenant_id": "010101", 
            "updated": "2012-08-16T17:14:50Z", 
            "user_id": "170454"
        }, 
        {
            "OS-DCF:diskConfig": "AUTO", 
            "OS-EXT-STS:power_state": 1, 
            "OS-EXT-STS:task_state": null, 
            "OS-EXT-STS:vm_state": "active", 
            "accessIPv4": "", 
            "accessIPv6": "", 
            "addresses": {
                "private": [
                    {
                        "addr": "10.180.13.75", 
                        "version": 4
                    }
                ], 
                "public": [
                    {
                        "addr": "2001:4800:780e:0510:d87b:9cbc:ff04:3e81", 
                        "version": 6
                    }, 
                    {
                        "addr": "50.56.186.185", 
                        "version": 4
                    }
                ]
            }, 
            "created": "2012-05-15T15:47:37Z", 
            "flavor": {
                "id": "6", 
                "links": [
                    {
                        "href": "https://dfw.servers.api.rackspacecloud.com/010101/flavors/6", 
                        "rel": "bookmark"
                    }
                ]
            }, 
            "hostId": "1d65b563fc573c2eb544319e0af598f2b2c5f84f75de252db3757cd3", 
            "id": "a09e7493-7429-41e1-8d3f-384d7ece09c0", 
            "image": {
                "id": "3afe97b2-26dc-49c5-a2cc-a2fc8d80c001", 
                "links": [
                    {
                        "href": "https://dfw.servers.api.rackspacecloud.com/010101/images/3afe97b2-26dc-49c5-a2cc-a2fc8d80c001", 
                        "rel": "bookmark"
                    }
                ]
            }, 
            "links": [
                {
                    "href": "https://dfw.servers.api.rackspacecloud.com/v2/010101/servers/a09e7493-7429-41e1-8d3f-384d7ece09c0", 
                    "rel": "self"
                }, 
                {
                    "href": "https://dfw.servers.api.rackspacecloud.com/010101/servers/a09e7493-7429-41e1-8d3f-384d7ece09c0", 
                    "rel": "bookmark"
                }
            ], 
            "metadata": {}, 
            "name": "UbuntuDevStack", 
            "progress": 100, 
            "status": "ACTIVE", 
            "tenant_id": "010101", 
            "updated": "2012-05-15T15:55:00Z", 
            "user_id": "170454"
        }
    ]
}</programlisting>
                </step>
                <step>
                    <para>Copy the ID for the server to which you want to connect a virtual interface. </para>
                </step>
            </procedure>
            <sidebar>
                <para><emphasis role="bold">Next step:</emphasis>
                    <link linkend="list_networks2">List networks</link></para>
            </sidebar>
        </section>

    </section>
    <?hard-pagebreak?>
    <section xml:id="list_networks2">
        <title>Step 3. List Networks</title>
        <para>To get the ID of the network for which you want to create virtual interface, list the networks in your Cloud
            account. </para>
        <sidebar>
            <para><emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                    <listitem>
                        <para><link linkend="nova_list_networks2">List networks with the nova client</link></para>
                    </listitem>
                    <listitem>
                        <para><link linkend="curl_list_networks2">List networks with cURL</link></para>
                    </listitem>
                </itemizedlist></para>
        </sidebar>
        <section xml:id="nova_list_networks2">
            <title>List Networks with the nova Client</title>
            <procedure>
                <title>To list networks with the nova client</title>
                <step>
                    <para>Issue the following nova client command:</para>
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?><prompt>$</prompt> nova network-list </programlisting>
                    <para><emphasis role="bold">Output:</emphasis></para>
                    <para>For each network, the command returns the network ID, label, and <glossterm>CIDR</glossterm>, as
                        shown in the following output:</para>
                    <informalexample>
                        <screen><computeroutput><?db-font-size 75%?>+--------------------------------------+-------------+----------------+
| ID                                   | Label       | CIDR           |
+--------------------------------------+-------------+----------------+
| 00000000-0000-0000-0000-000000000000 | public      |                |
| 11111111-1111-1111-1111-111111111111 | private     |                |
| 1f84c238-b05a-4374-a0cb-aa6140032cd1 | new_network | 192.168.0.0/24 |
+--------------------------------------+-------------+----------------+</computeroutput></screen>
                    </informalexample>
                    <para>In the network list, ServiceNet is labeled as <literal>private</literal>, and PublicNet is labeled
                        as <literal>public</literal>.</para>
                </step>
                <step>
                    <para>Copy the ID for the network for which you want to create a virtual interface. </para>
                </step>
            </procedure>
            <sidebar>
                <para><emphasis role="bold">Next step:</emphasis>
                    <link linkend="create_virt_interface">Create a virtual interface</link></para>
            </sidebar>
        </section>
        <?hard-pagebreak?>
        <section xml:id="curl_list_networks2">
            <title>List Networks with cURL</title>
            <para>You can request a JSON or XML response when you issue a request in a cURL command.</para>
            <section xml:id="list_networks2_json">
                <title>JSON Request and Response</title>
                <procedure>
                    <title>To list networks and request a JSON response</title>
                    <step>
                        <para>Issue the following cURL command: <programlisting language="bash" role="gutter: false"><?db-font-size 75%?><prompt>$</prompt> curl https://dfw.servers.api.rackspacecloud.com/v2/$account/&cnresource2; \
       -X GET \
       -H "X-Auth-Token: $token" | python -m json.tool</programlisting>
                            <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>For each isolated network, the response returns the <glossterm>CIDR</glossterm>. Additionally,
                            for isolated networks and Rackspace networks, the response returns the network ID and label.
                            <programlisting language="json"><?db-font-size 75%?><xi:include href="../../../shared/samples/networks.json" parse="text"/></programlisting></para>
                    </step>
                    <step>
                        <para>Copy the ID for the network for which you want to create a virtual interface. </para>
                    </step>
                </procedure>

                <sidebar>
                    <para><emphasis role="bold">Next step:</emphasis>
                        <link linkend="create_virt_interface">Create a virtual interface</link></para>
                </sidebar>
            </section>
            <section xml:id="list_networks2_xml">
                <title>XML Request and Response</title>
                <procedure>
                    <title>To list networks and request an XML response</title>
                    <step>
                        <para>Issue the following cURL command:<programlisting language="bash" role="gutter: false"><?db-font-size 75%?>curl -i https://dfw.servers.api.rackspacecloud.com/v2/$account/os-networksv2.xml \
        -H "Content-Type: application/xml" \
        -H "Accept: application/xml" \
        -X GET -H "X-Auth-Token: $token" </programlisting>
                            <emphasis role="bold">Output:</emphasis>
                        </para>
                        <para>For each isolated network, the response returns the <glossterm>CIDR</glossterm>. Additionally,
                            for isolated networks and Rackspace networks, the response returns the network ID and label.
                            <programlisting language="xml"><?db-font-size 75%?><xi:include href="../../../shared/samples/networks.xml" parse="text"/> </programlisting></para>
                        <para>ServiceNet is labeled as <literal>private</literal> and PublicNet is labeled as
                                <literal>public</literal> in the network list.</para>
                    </step>
                    <step>
                        <para>Copy the ID for the network for which you want to create a virtual interface. </para>
                    </step>
                </procedure>
                <sidebar>
                    <para><emphasis role="bold">Next step:</emphasis>
                        <link linkend="create_virt_interface">Create a virtual interface</link></para>
                </sidebar>
            </section>
        </section>
    </section>
    <?hard-pagebreak?>

    <section xml:id="create_virt_interface">
        <title>Step 4. Create a Virtual Interface</title>
        <para>When you create a virtual interface, you specify the following information:<itemizedlist>
                <listitem>
                    <para><emphasis role="bold">Network ID</emphasis>. The ID of the network for which you want to create a
                        virtual interface.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Server ID</emphasis>. The ID of the server instance to which you want to
                        connect the virtual interface. </para>
                </listitem>
            </itemizedlist></para>

        <sidebar>
            <para><emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                    <listitem>
                        <para><link linkend="nova_create_virt_interface">Create a virtual interface with the nova client</link></para>
                    </listitem>
                    <listitem>
                        <para><link linkend="curl_create_virt_interfaces_for_server">Create a virtual interface with cURL</link></para>
                    </listitem>
                </itemizedlist></para>
        </sidebar>
        <section xml:id="nova_create_virt_interface">
            <title>Create a Virtual Interface with the nova Client</title>
            <procedure>
                <title>To create a virtual interface with the nova client</title>
                <step>
                    <para>Issue the following nova client command:</para>
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?><prompt>$</prompt> nova virtual-interface-create <replaceable>network_id</replaceable> <replaceable>instance_id</replaceable></programlisting>
                    <para><emphasis role="bold">Positional arguments:</emphasis></para>
                    <itemizedlist>
                        <listitem>
                            <para><parameter>network_id</parameter>. The ID of the network for which you want to create a
                                virtual interface. You copied this ID in <xref linkend="list_networks2"/>.</para>
                        </listitem>
                        <listitem>
                            <para><parameter>instance_id</parameter>. The ID of the server instance to which you want to
                                connect the virtual interface. You copied this ID in <xref linkend="list_servers2"/>.</para>
                        </listitem>
                    </itemizedlist>
                </step>
            </procedure>
            <sidebar>
                <para><emphasis role="bold">Next step:</emphasis>
                    <link linkend="list_virt_interfaces_for_server">List virtual interfaces for a server</link></para>
            </sidebar>
        </section>
        <?hard-pagebreak?>
        <section xml:id="curl_create_virt_interfaces_for_server">
            <title>Create Virtual Interface with cURL</title>
            <para>You can issue a JSON or XML request in a cURL command.</para>
            <section xml:id="curl_create_virt_interface_json">
                <title>JSON Request and Response</title>
                <procedure>
                    <title>To create a virtual interface and request a JSON response</title>
                    <step>
                        <para>To create a virtual interface, you must specify the server ID in the request URI, and include a
                            request body that specifies the network ID for which you want to create a virtual interface. </para>
                        <para>For example, issue the following cURL command:</para>
                        <programlisting language="bash" role="gutter: false"><?db-font-size 75%?><prompt>$</prompt> curl https://dfw.servers.api.rackspacecloud.com/v2/$account/servers/$instance_id/os-virtual-interfacesv2 \
     -X POST \
     -H "Content-Type: application/json" \
     -H "Accept: application/json" \
     -H "X-Auth-Token: $token" \
     -d '{"virtual_interface": {"network_id": "<replaceable>network_id</replaceable>"}}'| python -m json.tool</programlisting>
                        <para><emphasis role="bold">Arguments:</emphasis></para>
                        <itemizedlist>
                            <listitem>
                                <para><parameter>instance_id</parameter>. The ID of the server instance to which you want to
                                    connect the virtual interface. You copied this ID in
                                    <xref linkend="list_servers2"/>.</para>
                            </listitem>
                            <listitem>
                                <para><parameter>network_id</parameter>. The ID of the network for which you want to create a
                                    virtual interface. You copied this ID in <xref linkend="list_networks2"/>.</para>
                            </listitem>
                        </itemizedlist>
                        <para><emphasis role="bold">Output:</emphasis>
                        </para>
                        <programlisting language="json"><?db-font-size 65%?><xi:include href="../../../shared/samples/create_virtual_interface_resp.json" parse="text"/></programlisting>
                    </step>
                </procedure>
                <sidebar>
                    <para><emphasis role="bold">Next step:</emphasis>
                        <link linkend="list_virt_interfaces_for_server">List virtual interfaces for a server</link></para>
                </sidebar>
            </section>
            <section xml:id="curl_create_virt_interface_xml">
                <title>XML Request and Response</title>

                <procedure>
                    <title>To create a virtual interface and request an XML response</title>
                    <step>
                        <para>To create a virtual interface, you must specify the server ID in the request URI, and include a
                            request body that specifies the network ID for which you want to create a virtual interface. </para>
                        <para>For example, issue the following cURL command:</para>
                        <programlisting language="bash" role="gutter: false"><?db-font-size 75%?><prompt>$</prompt> curl -i https://dfw.servers.api.rackspacecloud.com/v2/$account/servers/$instance_id/os-virtual-interfacesv2.xml \
      -X POST \
      -H "Content-Type: application/xml" \
      -H "Accept: application/xml" \
      -H "X-Auth-Token: $token" \
      -d '&lt;?xml version="1.0" encoding="UTF-8"?>&lt;virtual_interface network_id="<replaceable>network_id</replaceable>"/>'</programlisting>
                        <para><emphasis role="bold">Arguments:</emphasis></para>
                        <itemizedlist>
                            <listitem>
                                <para><parameter>instance_id</parameter>. The ID of the server instance to which you want to
                                    connect the virtual interface. You copied this ID in
                                    <xref linkend="list_servers2"/>.</para>
                            </listitem>
                            <listitem>
                                <para><parameter>network_id</parameter>. The ID of the network for which you want to create a
                                    virtual interface. You copied this ID in <xref linkend="list_networks2"/>.</para>
                            </listitem>
                        </itemizedlist>
                        <para><emphasis role="bold">Output:</emphasis>
                        </para>
                        <programlisting language="json"><?db-font-size 65%?><xi:include href="../../../shared/samples/create_virtual_interface_resp.xml" parse="text"/></programlisting>
                    </step>
                </procedure>
                <sidebar>
                    <para><emphasis role="bold">Next step:</emphasis>
                        <link linkend="list_virt_interfaces_for_server">List virtual interfaces for a server</link></para>
                </sidebar>
            </section>
        </section>
    </section>
    <?hard-pagebreak?>
    <section xml:id="list_virt_interfaces_for_server">
        <title>Step 5. List Virtual Interfaces for a Server</title>
        <para>To validate that you created and connected the virtual interface to your server, you can list the virtual
            interfaces for your server. </para>

        <sidebar>
            <para><emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                    <listitem>
                        <para><link linkend="nova_list_virt_interfaces_for_server">List virtual interfaces for a server
                                with the nova client</link></para>
                    </listitem>
                    <listitem>
                        <para><link linkend="curl_list_virt_interfaces_for_server">List virtual interfaces for server
                                with cURL</link></para>
                    </listitem>
                </itemizedlist></para>
        </sidebar>
        <section xml:id="nova_list_virt_interfaces_for_server">
            <title>List Virtual Interfaces for a Server with the nova Client</title>
            <procedure>
                <title>To list virtual interfaces for a server with the nova client</title>
                <step>
                    <para>Issue the following nova client command:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 75%?><prompt>$</prompt> nova virtual-interface-list <replaceable>instance_id</replaceable></programlisting></para>
                    <para><emphasis role="bold">Positional argument:</emphasis></para>
                    <itemizedlist>
                        <listitem>
                            <para><parameter>instance_id</parameter>. The ID of the server instance for which you want to
                                list virtual interfaces. You copied this ID in <xref linkend="list_servers2"/>.</para>
                        </listitem>
                    </itemizedlist>
                    <para><emphasis role="bold">Output:</emphasis></para>
                    <para>For any virtual interfaces that are connected to the specified server, the command returns the
                        network ID, MAC address, and IP addresses, as shown in the following output:</para>
                    <informalexample>
                        <screen><computeroutput><?db-font-size 65%?>+--------------------------------------+-------------------+---------------------------------------------------------------------------------------+
| id                                   | mac_address       | ip_addresses                                                                          |
+--------------------------------------+-------------------+---------------------------------------------------------------------------------------+
| 398f4189-5a60-4a5e-8a68-71e4fa014313 | 00:00:00:00:00:01 | label=private, network_id=39a43ded-7a9b-4a50-8633-e70d48363305, ip_address=172.16.0.2 |
| d5e3c9b6-bd5d-46c9-ba7b-114df3f37fb3 | 00:00:00:00:00:00 | label=mypriv, network_id=1f7920d3-0e63-4fec-a1cb-f7916671e8eb, ip_address=10.1.0.3      |
| d8a1baa8-3b51-4a74-9e33-f885e438a468 | 00:00:00:00:00:02 | label=public, network_id=69ebc6a6-27fc-4f47-aeca-de7c3b4685e7, ip_address=10.0.0.3    |
+--------------------------------------+-------------------+---------------------------------------------------------------------------------------+</computeroutput>
                    </screen>
                    </informalexample>

                </step>
                <step>
                    <para>If you want to delete this interface later on, copy the ID for the virtual interface. </para>
                </step>
            </procedure>
            <!--<sidebar>
                <para><emphasis role="bold">Next step:</emphasis>
                    <link linkend="delete_virt_interface">Delete a
                        virtual interface from a server</link></para>
            </sidebar>-->
        </section>
        <?hard-pagebreak?>
        <section xml:id="curl_list_virt_interfaces_for_server">
            <title>List Virtual Interfaces for a Server with cURL</title>
            <para>You can request a JSON or XML response when you issue a request in a cURL command.</para>
            <section xml:id="curl_list_virt_interfaces_json">
                <title>JSON Request and Response</title>

                <procedure>
                    <title>To list virtual interfaces for a server and request a JSON response</title>
                    <step>
                        <para>Issue the following cURL command:</para>
                        <programlisting language="bash" role="gutter: false"><?db-font-size 75%?><prompt>$</prompt> curl https://dfw.servers.api.rackspacecloud.com/v2/$account/servers/$instance_id/os-virtual-interfacesv2  \
       -X GET \
       -H "X-Auth-Token: $token" | python -m json.tool</programlisting>
                        <para><emphasis role="bold">Argument:</emphasis></para>
                        <itemizedlist>
                            <listitem>
                                <para><parameter>instance_id</parameter>. The ID of the server instance for which you want to
                                    list virtual interfaces. You copied this ID in <xref linkend="list_servers2"/>.</para>
                            </listitem>
                        </itemizedlist>
                        <para><emphasis role="bold">Output:</emphasis>
                        </para>

                        <programlisting language="json"><?db-font-size 65%?><xi:include href="../../../shared/samples/virtual_interfaces.json" parse="text"/></programlisting>
                    </step>
                    <step>
                        <para>If you want to delete this interface later on, copy the ID for the virtual interface. </para>
                    </step>
                </procedure>
                <!--<sidebar>
                    <para><emphasis role="bold">Next step:</emphasis>
                          <link linkend="delete_virt_interface">Delete a virtual interface from a server</link> </para>
                </sidebar>-->

            </section>
            <section xml:id="curl_list_virt_interfaces_xml">
                <title>XML Request and Response</title>

                <procedure>
                    <title>To list virtual interfaces for a server and request a XML response</title>
                    <step>
                        <para>Issue the following cURL command:</para>
                        <programlisting language="bash" role="gutter: false"><?db-font-size 75%?><prompt>$</prompt> curl -i https://dfw.servers.api.rackspacecloud.com/v2/$account/servers/$instance_id/os-virtual-interfacesv2.xml  \
       -H "Content-Type: application/xml" \
       -H "Accept: application/xml" \
       -X GET \
       -H "X-Auth-Token: $token" </programlisting>
                        <para><emphasis role="bold">Argument:</emphasis></para>
                        <itemizedlist>
                            <listitem>
                                <para><parameter>instance_id</parameter>. The ID of the server instance for which you want to
                                    list virtual interfaces. You copied this ID in <xref linkend="list_servers2"/>.</para>
                            </listitem>
                        </itemizedlist>
                        <para><emphasis role="bold">Output:</emphasis>
                        </para>
                        <programlisting language="xml"><?db-font-size 65%?><xi:include href="../../../shared/samples/virtual_interfaces.xml" parse="text"/></programlisting>
                    </step>
                    <step>
                        <para>If you want to delete this interface later on, copy the ID for the virtual interface. </para>
                    </step>
                </procedure>
                <!--<sidebar>
                    <para><emphasis role="bold">Next step:</emphasis>
                          <link linkend="delete_virt_interface">Delete a virtual interface from a server</link> </para>
                </sidebar>-->
            </section>
        </section>

    </section>
    <?hard-pagebreak?>
    <section xml:id="delete_virt_interface">
        <title>Step 6. Delete a Virtual Interface from a Server</title>
        <para>If your server no longer needs the virtual interface, you can delete and detach it from the server. </para>
        <para>To delete and detach your virtual interface from a server, you need the ID of your server instance and the ID
            for the virtual interface. </para>

        <para>After you delete the virtual interface, it no longer appears in the list of virtual interfaces for your
            server.</para>
        <sidebar>
            <para><emphasis role="bold">Next step:</emphasis> Choose one of the following methods:<itemizedlist>
                    <listitem>
                        <para><link linkend="nova_delete_vir_interface">Delete a virtual interface with the
                                nova client</link></para>
                    </listitem>
                    <listitem>
                        <para><link linkend="curl_delete_vir_interface">Delete a virtual interface with
                                cURL</link></para>
                    </listitem>
                </itemizedlist></para>
        </sidebar>

        <section xml:id="nova_delete_vir_interface">
            <title>Delete a Virtual Interface with the nova Client</title>
            <procedure>
                <title>To delete a virtual interface with the nova client:</title>
                <step>
                    <para>Issue the following command:</para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> nova virtual-interface-delete <replaceable>instance_id</replaceable> <replaceable>interface_id</replaceable></programlisting>
                    <para><emphasis role="bold">Positional arguments:</emphasis></para>
                    <itemizedlist>
                        <listitem>
                            <para><parameter>instance_id</parameter>. The ID of the server instance from which you want to
                                detach the virtual interface. You copied this ID in <xref linkend="list_servers2"/>.</para>
                        </listitem>
                        <listitem>
                            <para><parameter>interface_id</parameter>. The ID of the virtual interface that you want to
                                delete. You copied this ID in <xref linkend="list_virt_interfaces_for_server"/>.</para>
                        </listitem>
                    </itemizedlist>
                </step>
                <step>
                    <para>Issue the following nova client command to determine if your virtual interface was deleted:
                        <programlisting language="bash" role="gutter: false"><?db-font-size 75%?><prompt>$</prompt> nova virtual-interface-list <replaceable>instance_id</replaceable></programlisting></para>
                    <para><emphasis role="bold">Positional argument:</emphasis></para>
                    <itemizedlist>
                        <listitem>
                            <para><parameter>instance_id</parameter>. The ID of the server instance for which you want to
                                list virtual interfaces. </para>
                        </listitem>
                    </itemizedlist>
                    <para>After the virtual interface is deleted, it no longer appears in the list of virtual interfaces. See
                        <xref linkend="list_virt_interfaces_for_server"/>.</para>
                </step>

            </procedure>
        </section>
        <?hard-pagebreak?>
        <section xml:id="curl_delete_vir_interface">
            <title>Delete a Virtual Interface with cURL</title>

            <procedure>
                <title>To delete a virtual interface with cURL:</title>
                <step>
                    <para>Issue the following command. In the command, specify the ID for the server that you want to
                        delete.</para>
                    <programlisting language="bash" role="gutter: false"><?db-font-size 60%?><prompt>$</prompt> curl -i https://dfw.servers.api.rackspacecloud.com/v2/$account/servers/$instance_id/os-virtual-interfacesv2/$interface_id \
     -X DELETE \
     -H "X-Auth-Token: $token"</programlisting>
                    <para><emphasis role="bold">Arguments:</emphasis></para>
                    <itemizedlist>
                        <listitem>
                            <para><parameter>instance_id</parameter>. The ID of the server instance from which you want to
                                detach the virtual interface. You copied this ID in <xref linkend="list_servers2"/>.</para>
                        </listitem>
                        <listitem>
                            <para><parameter>interface_id</parameter>. The ID of the virtual interface that you want to
                                delete. You copied this ID in <xref linkend="list_virt_interfaces_for_server"/>.</para>
                        </listitem>
                    </itemizedlist>
                    <para>Because the delete server method does not return a JSON object, you omit the following code from
                        the command:</para>
                    <programlisting language="bash" role="gutter: false">| python -m json.tool</programlisting>
                    <para>If you include it, the command runs successfully, but you get the following message:</para>
                    <programlisting language="bash" role="gutter: false">No JSON object could be decoded.</programlisting>
                    <para>To see the status code that is returned from the request, you use the <option>-i</option> option on
                        the cURL command. This option shows the HTTP header in the output. </para>
                    <para><remark>VERIFY: need new example - </remark>If the delete operation was successful, the HTTP header
                        shows the <returnvalue>204</returnvalue> status code, as shown in the following output:</para>
                    <programlisting language="bash" role="gutter: false"><?db-font-size 65%?>HTTP/1.1 204 No Content
Date: Thu, 16 Aug 2012 17:19:53 GMT
Content-Length: 0
Content-Type: application/json
X-Compute-Request-Id: req-3bdafeb2-d4b1-41c3-ab19-d310f3f270d3
Server: Jetty(8.0.y.z-SNAPSHOT)</programlisting>
                </step>
                <step>
                    <para>Issue the following cURL command to determine if your virtual interface was deleted:</para>
                    <programlisting language="bash" role="gutter: false"><?db-font-size 75%?><prompt>$</prompt> curl https://dfw.servers.api.rackspacecloud.com/v2/$account/servers/$instance_id/os-virtual-interfacesv2  \
       -X GET \
       -H "X-Auth-Token: $token" | python -m json.tool</programlisting>
                    <para><emphasis role="bold">Argument:</emphasis></para>
                    <itemizedlist>
                        <listitem>
                            <para><parameter>instance_id</parameter>. The ID of the server instance for which you want to
                                list virtual interfaces. You copied this ID in <xref linkend="list_servers2"/>.</para>
                        </listitem>
                    </itemizedlist>
                    <para>After the virtual interface is deleted, it no longer appears in the list of virtual interfaces.
                    </para>
                </step>
            </procedure>
        </section>
    </section>
</chapter>
